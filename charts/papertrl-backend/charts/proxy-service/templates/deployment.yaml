apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appName }}-deployment
  namespace: {{ .Release.Namespace }}  # Uses the namespace from `helm install`
  labels:
    app: {{ .Values.appName }}

spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.appName }}

  strategy:
    type: {{ .Values.global.updateStrategy.type }}
    {{- if eq .Values.global.updateStrategy.type "RollingUpdate" }}
    rollingUpdate:
      maxUnavailable: {{ .Values.global.updateStrategy.rollingUpdate.maxUnavailable }}
      maxSurge: {{ .Values.global.updateStrategy.rollingUpdate.maxSurge }}
    {{- end }}

  template:
    metadata:
      labels:
        app: {{ .Values.appName }}

    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      {{- range .Values.deployment.affinity.architectures }}
                      - {{ . }}
                      {{- end }}

      containers:
        - name: {{ .Values.appName }}
          image: {{ .Values.deployment.image.repository }}:{{ .Values.global.image.tag }}
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}

          ports:
            - name: {{ .Values.deployment.ports.name }}
              containerPort: {{ .Values.deployment.ports.containerPort }}

          env:
            {{- range $key, $value := .Values.global.env.configMap.keys }}
            - name: {{ $key | upper }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $.Values.global.env.configMap.name }}
                  key: {{ $value }}
            {{- end }}

            {{- range $key, $value := .Values.global.env.secret.keys }}
            - name: {{ $key | upper }}
              valueFrom:
                secretKeyRef:
                  name: {{ $.Values.global.env.secret.name }}
                  key: {{ $value }}
            {{- end }}

          readinessProbe:
            tcpSocket:
              port: {{ .Values.deployment.readinessProbe.tcpSocket.port }}
            initialDelaySeconds: {{ .Values.deployment.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.deployment.readinessProbe.periodSeconds }}

          resources:
            requests:
              memory: "{{ .Values.deployment.resources.requests.memory }}"
              cpu: "{{ .Values.deployment.resources.requests.cpu }}"
            limits:
              memory: "{{ .Values.deployment.resources.limits.memory }}"
              cpu: "{{ .Values.deployment.resources.limits.cpu }}"

          volumeMounts:
            - name: {{ .Values.global.volume.claimName }}
              mountPath: {{ .Values.global.volume.mountPath }}

      nodeSelector:
        eks.amazonaws.com/nodegroup: {{ .Values.deployment.nodeSelector.nodegroup}}



      volumes:
        - name: {{ .Values.global.volume.claimName }}
          persistentVolumeClaim:
            claimName: {{ .Values.global.volume.claimName }}
