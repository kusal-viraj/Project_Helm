apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appName }}-deployment
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.appName }}

spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.appName }}

  strategy:
    type: {{ .Values.deployment.updateStrategy.type }}
    {{- if eq .Values.deployment.updateStrategy.type "RollingUpdate" }}
    rollingUpdate:
      maxUnavailable: {{ .Values.deployment.updateStrategy.rollingUpdate.maxUnavailable }}
      maxSurge: {{ .Values.deployment.updateStrategy.rollingUpdate.maxSurge }}
    {{- end }}

  template:
    metadata:
      labels:
        app: {{ .Values.appName }}

    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      {{- range .Values.deployment.affinity.architectures }}
                      - {{ . }}
                      {{- end }}

      containers:
        - name: {{ .Values.appName }}
          image: {{ .Values.deployment.image.repository }}:{{ .Values.deployment.image.tag }}
          imagePullPolicy: {{ .Values.deployment.image.pullPolicy }}

          ports:
            - name: {{ .Values.deployment.ports.name }}
              containerPort: {{ .Values.deployment.ports.containerPort }}

{{/*          env:*/}}
{{/*            {{- range $key, $value := .Values.env.configMap.keys }}*/}}
{{/*            - name: {{ $key | upper }}*/}}
{{/*              valueFrom:*/}}
{{/*                configMapKeyRef:*/}}
{{/*                  name: {{ $.Values.global.env.configMap.name }}*/}}
{{/*                  key: {{ $value }}*/}}
{{/*            {{- end }}*/}}

{{/*            {{- range $key, $value := .Values.global.env.secret.keys }}*/}}
{{/*            - name: {{ $key | upper }}*/}}
{{/*              valueFrom:*/}}
{{/*                secretKeyRef:*/}}
{{/*                  name: {{ $.Values.global.env.secret.name }}*/}}
{{/*                  key: {{ $value }}*/}}
{{/*            {{- end }}*/}}

{{/*          readinessProbe:*/}}
{{/*            tcpSocket:*/}}
{{/*              port: {{ .Values.deployment.readinessProbe.tcpSocket.port }}*/}}
{{/*            initialDelaySeconds: {{ .Values.deployment.readinessProbe.initialDelaySeconds }}*/}}
{{/*            periodSeconds: {{ .Values.deployment.readinessProbe.periodSeconds }}*/}}

          resources:
            requests:
              memory: "{{ .Values.deployment.resources.requests.memory }}"
              cpu: "{{ .Values.deployment.resources.requests.cpu }}"
            limits:
              memory: "{{ .Values.deployment.resources.limits.memory }}"
              cpu: "{{ .Values.deployment.resources.limits.cpu }}"

{{/*          volumeMounts:*/}}
{{/*            - name: {{ .Values.deployment.volume.claimName }}*/}}
{{/*              mountPath: {{ .Values.deployment.volume.mountPath }}*/}}

      nodeSelector:
        eks.amazonaws.com/nodegroup: {{ .Values.deployment.nodeSelector.nodegroup}}



      volumes:
        - name: {{ .Values.deployment.volume.claimName }}
          persistentVolumeClaim:
            claimName: {{ .Values.deployment.volume.claimName }}
